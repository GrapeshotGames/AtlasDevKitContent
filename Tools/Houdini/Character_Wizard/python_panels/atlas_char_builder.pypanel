<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="atlas_character_builder" label="Atlas Character Builder" icon="$HOME/houdini16.5/config/Icons/atlas_icon.png" help_url="">
    <script><![CDATA[########################################################################
#Atlas Character Wizard
########################################################################

import sys
import os
import hou
import toolutils
from hutil.Qt import QtCore, QtUiTools, QtWidgets


###############################################################
#Get current version of Houdini
fullVersion = hou.applicationVersion()
finalversion = str(fullVersion[0]) + "." + str(fullVersion[1])

folder = os.environ["HOME"] + "/Houdini" + finalversion + "/python_panels/Atlas_Character_Builder.ui"
icon = os.environ["HOME"] + "/Houdini" + finalversion + "/python_panels/icons/atlas_icon_64.png"
##############################################################



##############################################################
#Find out the License installed
curLicense = hou.licenseCategory()
##############################################################




###################################################
#Utility functions to get all the nodes in the wizard
def getObj():
    obj = hou.node("/obj")
    return obj


def getWizardNode():
    obj = getObj()
    wizard = obj.node("Character_Wizard")

    return wizard

def getClothFBx():
    obj = getObj()
    clothFbx = obj.node("Cloth_FBX")

    return clothFbx

def getBodiesNode():
    wizard = getWizardNode()
    bodiesNode = wizard.node("Default_Bodies")

    return bodiesNode
    
def getClothingManager():
    wizard = getWizardNode()
    clothManager = wizard.node("Manage_Clothing")

    return clothManager

def getAtlasClothing():
    manager = getClothingManager()
    atlasNode = manager.node("mb_atlas_clothing1")

    return atlasNode

def getPaintingNode():
    wizard = getWizardNode()
    paintingNode = wizard.node("Painting")

    return paintingNode

def getSkinningNode():
    wizard = getWizardNode()
    skinningNode = wizard.node("Skinning")

    return skinningNode

def getPainterHDA():
    paintingNode = getPaintingNode()
    painterNode = paintingNode.node("wc_shrinkmask_painter")

    return painterNode

def getClearNode():
    wizard = getWizardNode()
    clearNode = wizard.node("Clear_Null")

    return clearNode

def getExportNode():
    wizard = getWizardNode()
    exportNode = wizard.node("Export")

    return exportNode


def getCleanNode():
    exportNode = getExportNode()
    children = exportNode.children()

    cleanNode = None
    for node in children:
        if node.type().name() == "clean":
            cleanNode = node

    return cleanNode


def getSceneInfo():
    clothNode = getClothFBx()

    #Check to see if there is a mesh already assigned to the cloth node
    if clothNode != None:
        filenode = clothNode.node("Fbx_File")
        path = filenode.parm("file").eval()

        lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "line_name")
        if len(path) > 0:
            lineEdit.setText(" " + path)
            setClothFileName()
        else:
            lineEdit.setText("No Fbx Loaded")
    else:
        hou.ui.displayMessage("Shiver me Timbers! We be needin a Cloth Node! {Get Scene Info Function}", ["Ok"])

    #Check to see if meshes are assigned to the shrink and projection paths
    wizardNode = getWizardNode()
    if wizardNode != None:
        shrinkPath = wizardNode.parm("shrink_shape_geo").eval()
        projectionPath = wizardNode.parm("projection_shape_geo").eval()
        if len(shrinkPath) > 0:
            shrinkEdit = mainWindow.findChild(QtWidgets.QLineEdit, "shrinkshapelineedit")
            shrinkEdit.setText(shrinkPath)
        
        if len(projectionPath) > 0:
            projectionEdit = mainWindow.findChild(QtWidgets.QLineEdit, "projectionShapePath")
            projectionEdit.setText(projectionPath)
    else:
        hou.ui.displayMessage("Shiver me Timbers! We be needin a Cloth Node! {Get Scene Info Function}", ["Ok"])


#Used to intialize all the sliders and numerical values
def initAdvancedSliders():
    togglePreview()
    updateShrinkValue()
    updateHighFatValue()
    updateUVSmoothIters()

    #set default values
    maxDistSlider = mainWindow.findChild(QtWidgets.QSlider, "MaxDistSlider")
    maxDistSlider.setValue(8)
    updateMaxDistValue()
    

    deltaPSlider = mainWindow.findChild(QtWidgets.QSlider, "deltapstrengthslider")
    deltaPSlider.setValue(61)
    updateDeltaPValue()

    updateSmoothDistValue()
    updateMaxPntsValue()
    updateIterationsValue()
    updateDistInfluenceValue()

    updateNumericalValues()
    


def getExportNullNode(parent):
    if parent != None:
        children = parent.children()
        nullNode = None

        for child in children:
            if child.type().name() == "null":
                nullNode = child
        
        return nullNode
    else:
        hou.ui.displayMessage("Avast! We have no Export Node, Matey {Get Export Null Node Function}", ["Ok"])



def handleNodeViz(painting):
    bodies = getBodiesNode()
    manager = getClothingManager()
    paint = getPaintingNode()
    #skin = getSkinningNode()
    clearNode = getClearNode()

    if painting == 1:
        bodies.setDisplayFlag(False)
        manager.setDisplayFlag(False)
        #skin.setDisplayFlag(False)
        paint.setDisplayFlag(True)
    elif painting == 0:
        bodies.setDisplayFlag(True)
        manager.setDisplayFlag(True)
        #skin.setDisplayFlag(True)
        paint.setDisplayFlag(False)
        clearNode.setCurrent(True, True)


def getClothFilename():
    clothnode = getClothFBx()

    finalname = ""
    if clothnode != None:
        filenode = clothnode.node("Fbx_File")
        filepath = filenode.parm("file").eval()
        
        #split it up by the forward slash
        pathsplit = filepath.split("/")

        #remove thefile extension
        namesplit = pathsplit[len(pathsplit)-1].split(".")
        finalname = namesplit[0]
    
    return finalname


def setClothFileName():

    finalname = getClothFilename()
    
    #remove the prefix so we can add it later
    token = "_"
    findresult = finalname.find(token)
    cleanedname = finalname[findresult+1:]

    fbxfilename = mainWindow.findChild(QtWidgets.QLineEdit, "fbx_file_name")
    if curLicense == hou.licenseCategoryType.Apprentice or curLicense == hou.licenseCategoryType.ApprenticeHD:
        fbxfilename.setText("SM_" + cleanedname + ".bgeo")
    else:
        fbxfilename.setText("SM_" + cleanedname + ".fbx")
    

    maskfilename = mainWindow.findChild(QtWidgets.QLineEdit, "mask_file_name")
    maskfilename.setText("T_" + cleanedname + "_M.tga")

    cleanNode = getCleanNode()
    if cleanNode != None:
        cleanNode.setName(getClothFilename(), True)


def checkFileNames():
    print("Checking file names!")
####################################################




###################################################
#Create the mian nodes we need for the system to work
def createClothNode():
    houVersion = hou.applicationVersion()
    obj = getObj()
    clothNode = getClothFBx()

    if clothNode == None:
        clothNode = obj.createNode("geo", "Cloth_FBX")

        fileNode = None
        if houVersion[0] == 16:
            fileNode = obj.node("Cloth_FBX/file1")
            fileNode.setName("Fbx_File")
        elif houVersion[0] == 17:
            fileNode = clothNode.createNode("file", "Fbx_File")
        
        fileNode.parm("file").set("")

        attrDeleteNode = clothNode.createNode("attribdelete", "clean_attrs")
        attrDeleteNode.setInput(0, fileNode, 0)
        attrDeleteNode.setDisplayFlag(True)
        fileNode.setDisplayFlag(False)
        fileNode.setRenderFlag(False)

        attrDeleteNode.parm("vtxdel").set("Cd Alpha")
        attrDeleteNode.parm("ptdel").set("mypointid ShrinkDelta Cd Alpha")


def createWizardNode():
    obj = getObj()
    wizard = getWizardNode()

    if wizard == None:
        wizard = obj.createNode("wc_character_wizard", "Character_Wizard")
###################################################




####################################################
#Viewport Utility functions
def frameAll():
    viewer = toolutils.sceneViewer()
    viewer.enterViewState()
    
    for view in viewer.viewports():
        view.homeAll()

def setNoLighting():
    viewportLightingHelper(0)
    
def setNormalLighting():
    viewportLightingHelper(1)

def viewportLightingHelper(type):
    viewer = toolutils.sceneViewer()
    viewport = viewer.curViewport()
    viewportsettings = viewport.settings()

    if type == 0:
        viewportsettings.setLighting(hou.viewportLighting.Off)
    else:
        viewportsettings.setLighting(hou.viewportLighting.Normal)

def getResolution():
    resbox = mainWindow.findChild(QtWidgets.QComboBox, "res_box")
    currentID = resbox.currentIndex()
    finalID = 0

    if currentID == 0:
        finalID = 512
    elif currentID == 1:
        finalID = 1024
    elif currentID == 2:
        finalID = 2048
    elif currentID == 3:
        finalID = 4096

    return finalID

def getLayer():
    layerbox = mainWindow.findChild(QtWidgets.QComboBox, "layer_box")
    currentID = layerbox.currentIndex()
    finalID = currentID
    
    return finalID
###################################################





###################################################
#Body Functions
def toggleBody():
    wizard = getWizardNode()

    if wizard != None:
        bodytoggle = wizard.parm("defaultBody")
        togglebtn = mainWindow.findChild(QtWidgets.QPushButton, "body_toggle")

        if bodytoggle.eval() == 0:
            bodytoggle.set(1)
            togglebtn.setText("Toggle Body - Female")
        else:
            bodytoggle.set(0)
            togglebtn.setText("Toggle Body - Male")
    else:
        hou.ui.displayMessage("Shiver me Timbers! We be missin the Wizard Node! {ToggleBody Function - 298}", ["Ok"])


def toggleBodyViz():
    #print("Toggling Body Viz")
    bodiesNode = getBodiesNode()
    bodyvizbtn = mainWindow.findChild(QtWidgets.QPushButton, "body_viz_btn")

    if bodiesNode != None:
        isDisplayed = bodiesNode.isDisplayFlagSet()
        if isDisplayed:
            bodiesNode.setDisplayFlag(False)
            bodyvizbtn.setText("Body Viz - Off")
        else:
            bodiesNode.setDisplayFlag(True)
            bodyvizbtn.setText("Body Viz - On")
    else:
        hou.ui.displayMessage("Shiver me Timbers! We be missin the Bodies Node! {ToggleBodyViz Function - 316}", ["Ok"])
##################################################





##################################################
#Painting Functions
def loadMask():
    #get path to user Mask file
    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "load_mask_edit")
    filePath = ""

    lineEdit.setText(filePath)
    filePath = hou.ui.selectFile("", "Select Mask")

    if len(filePath) > 0:
        lineEdit.setText(filePath)

        painter = getPainterHDA()
        if painter != None:
            painter.parm("mask_texture").set(filePath)
            painter.parm("togglemask").set(1)
        else:
            hou.ui.displayMessage("Ahoy! We be missin the Painter Node! {PaintSkinViz Function - 342}", ["Ok"])
    else:
        hou.ui.displayMessage("Arrrgh! We cant load that texture for some reason! {PaintSkinViz Function - 345}", ["Ok"])

def paintSkinViz():
    
    setNoLighting()
    painterhda = getPainterHDA()

    if painterhda != None:
        painterhda.parm("paintred").pressButton()
        toggleShrinkMaskParms(False)
        togglePaintTools(True)
        handleNodeViz(1)
    else:
        hou.ui.displayMessage("Ahoy! We be missin the Painter Node! {PaintSkinViz Function - 358}", ["Ok"])
        

def paintShrinkMask():
    
    setNoLighting()
    painterhda = getPainterHDA()

    if painterhda != None:
        painterhda.parm("paintgreen").pressButton()
        toggleShrinkMaskParms(True)
        togglePaintTools(True)
        handleNodeViz(1)
    else:
        hou.ui.displayMessage("Ahoy! We be missin the Painter Node! {PaintShrinkMask Function - 349}", ["Ok"])


def updateBlurValue():
    painterhda = getPainterHDA()
    slider = mainWindow.findChild(QtWidgets.QSlider, "blur_slider")
    
    if painterhda != None:
        painterhda.parm("blurslider").set(slider.value())


def paintClothingViz():
    
    setNoLighting()
    painterhda = getPainterHDA()

    if painterhda != None:
        painterhda.parm("paintblue").pressButton()
        toggleShrinkMaskParms(False)
        togglePaintTools(True)
        handleNodeViz(1) 
    else:
        hou.ui.displayMessage("Ahoy! We be missin the Painter booty! {PaintClothingViz Function - 370}", ["Ok"])


def exitPainting():
    setNormalLighting()
    painterhda = getPainterHDA()

    if painterhda != None:
        painterhda.parm("exitPainting").pressButton()
        toggleShrinkMaskParms(False)
        togglePaintTools(False)
        handleNodeViz(0)
        setShrinkValue()
    else:
        hou.ui.displayMessage("Ahoy! We be missin the Painter Node! {ExitPainting Function - 384}", ["Ok"])

def updateDilateValue():
    painterhda = getPainterHDA()
    slider = mainWindow.findChild(QtWidgets.QSlider, "dilate_slider")
    label = mainWindow.findChild(QtWidgets.QLabel, "dilate_label")

    if painterhda != None:
        painterhda.parm("dilatesize").set(slider.value())
        label.setText("Dilate: " + str(slider.value()))


def updatePaintingTools():
    paintNode = getPainterHDA()
    symparm = paintNode.parm("symradio")
    symbtn = mainWindow.findChild(QtWidgets.QPushButton, "sym_btn")

    if symparm.eval() == 1:
        symparm.set(0)
        symbtn.setText("Symmetry - Off")
    else:
        symparm.set(1)
        symbtn.setText("Symmetry - On")


def toggleClothingInPainting():
    painterNode = getPainterHDA()
    clothTemplate = painterNode.node("OUT_Clothing")

    if clothTemplate != None:
        if clothTemplate.isTemplateFlagSet():
            clothTemplate.setTemplateFlag(False)
        else:
            clothTemplate.setTemplateFlag(True)
    else:
        hou.ui.displayMessage("Ahoy! We be missin the Cloth Template Node! {Toggle Cloth Function - 419}", ["Ok"])



def setMaskPath():
    #get path to user mask
    filePath = hou.ui.selectFile("", "Select Location", file_type=hou.fileType.Directory)
    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "mask_path")

    if len(filePath) > 0:
        lineEdit.setText(filePath)
    else:
        lineEdit.setText("No Path Set...")



def exportMasks():
    painterhda = getPainterHDA()
    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "mask_path")
    filename = mainWindow.findChild(QtWidgets.QLineEdit, "mask_file_name")
    
    

    if len(lineEdit.text()) > 0 and lineEdit.text() != "   No Path Set..."  and len(filename.text()) > 0:
        finalPath = lineEdit.text() + filename.text()

        painterhda.parm("out_path").set(finalPath)
        painterhda.parm("tex_res").set(getResolution())
        painterhda.parm("layervalue").set(getLayer())

        if painterhda != None:
            painterhda.parm("render").pressButton()
        else:
            hou.ui.displayMessage("Ahoy! We be missin the Painter HDA! {ExportMasks Function - 452}", ["Ok"])
    else:
        hou.ui.displayMessage("Avast! We be needing a path to export masks to, Matey", ["Ok"])
###################################################





###################################################
#Load FBX Files for Main Clothing, Shrink Shape, Projection Shape
def loadFbx():

    #get path to user fbx file 
    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "line_name")
    filePath = ""

    lineEdit.setText(filePath)
    filePath = hou.ui.selectFile("", "Select FBX")
    
    if len(filePath) > 0:
        #look for the base cloth node
        clothNode = getClothFBx()
        clothNode.setDisplayFlag(True)
        wizard = getWizardNode()
        wizard.parm("clothinput").set("")
        fileNode = clothNode.node("Fbx_File")
            
        if fileNode != None:
            fileNode.parm("file").set(filePath)
            fileNode.parm("reload").pressButton()

        #Reset all Painting
        painterhda = getPainterHDA()
        if painterhda != None:
            painterhda.parm("resetpainting").pressButton()
        
        #Set the name of the current cloth we are working on
        lineEdit.setText(" " + filePath)
        setClothFileName()

        frameAll()
    else:
        hou.ui.displayMessage("Ahoy! That is not a valid path for the FBX File! {Load FBX Function}", ["Ok"])




def loadShrinkShape():
    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "shrinkshapelineedit")
    filePath = hou.ui.selectFile("", "Select Shrink Shape", file_type=hou.fileType.Geometry)
    wizardNode = getWizardNode()

    if len(filePath) > 0:
        lineEdit.setText(filePath)
        if wizardNode != None:
            wizardNode.parm("shrink_shape_geo").set(filePath)
        else:
            hou.ui.displayMessage("Ahoy! Cannot find the Wizard Node! {Load Shrink Shape Function}", ["Ok"])    
    else:
        hou.ui.displayMessage("Ahoy! That is not a valid path for the Shrink Shape! {Load Shrink Shape Function}", ["Ok"])



def loadProjectionShape():
    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "projectionShapePath")
    filePath = hou.ui.selectFile("", "Select Projection Shape", file_type=hou.fileType.Geometry)
    wizardNode = getWizardNode()

    if len(filePath) > 0:
        lineEdit.setText(filePath)
        if wizardNode != None:
            wizardNode.parm("projection_shape_geo").set(filePath)
        else:
            hou.ui.displayMessage("Ahoy! Cannot find the Wizard Node! {Load Projection Shape Function}", ["Ok"])
    else:
        hou.ui.displayMessage("Ahoy! That is not a valid path for the Projection Shape! {Load Projection Shape Function}", ["Ok"])



def updateShrinkPath():
    wizardNode = getWizardNode()
    shrinkLE = mainWindow.findChild(QtWidgets.QLineEdit, "shrinkshapelineedit")

    if wizardNode != None:
        wizardNode.parm("shrink_shape_geo").set(shrinkLE.text())
        if len(shrinkLE.text()) == 0:
            shrinkLE.setText("  No Shrink Shape Loaded...")



def updateProjectionPath():
    wizardNode = getWizardNode()
    projectionLE = mainWindow.findChild(QtWidgets.QLineEdit, "projectionShapePath")

    if wizardNode != None:
        wizardNode.parm("projection_shape_geo").set(projectionLE.text())
        if len(projectionLE.text()) == 0:
            projectionLE.setText("  No Projection Shape Loaded...")
####################################################
            





        
##################################################
#Process clothing
def setShrinkValue():
    atlasNode = getAtlasClothing()
    
    if atlasNode != None:
        shrinkval = atlasNode.parm("shrinkamount").eval()
        lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "shrink_val_edit")
        lineEdit.setText(str(shrinkval))


def processClothing():
    #print("processing clothing")
    wizard = getWizardNode()
        
    #get the cloth node
    clothNode = getClothFBx()
    fileNode = clothNode.node("Fbx_File")
    fileParm = fileNode.parm("file")

    if clothNode != None:
        if len(fileParm.eval()) > 0:
            wizard.parm("clothinput").set(clothNode.path())
            clothNode.setDisplayFlag(False)
            setShrinkValue()
        else:
            hou.ui.displayMessage("Avast! You be needin to load an FBX mesh Matey!", ["Ok"])


def setRigidGroup():
    atlasNode = getAtlasClothing()
    rigidEdit = mainWindow.findChild(QtWidgets.QLineEdit, "rigid_grp_edit")

    if atlasNode != None:
        atlasNode.parm("rigidgroup").set(rigidEdit.text())
#################################################
        
        


        
#################################################
#Export an FBX of the final cloth model
def getFbxPath():

    #get path to user location
    filePath = hou.ui.selectFile("", "Select Location", file_type=hou.fileType.Directory)
    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "fbx_path")

    if len(filePath) > 0:
        lineEdit.setText(filePath)
        setShrinkValue()
    else:
        lineEdit.setText("No Path Set...")



def exportFbx():
    #print("exporting fbx")
    exportNode = getExportNode()
    cleanNode = getCleanNode()

    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "fbx_path")
    filename = mainWindow.findChild(QtWidgets.QLineEdit, "fbx_file_name")

    if len(lineEdit.text()) > 0 and lineEdit.text() != "  No Path Set..." and len(filename.text()) > 0:

        finalPath = lineEdit.text() + filename.text()

        if exportNode != None:
            ropNode = exportNode.node("kl_advanced_fbx_export1")
            ropNode.parm("output_path").set(finalPath)

            exportNode = getExportNode()
            nullNode = getExportNullNode(exportNode)

            if nullNode != None:
                nullNode.setName(getClothFilename(), True)

            if cleanNode != None:
                cleanNode.setName(getClothFilename(), True)

            ropNode.parm("exportBtn").pressButton()
        else:
            hou.ui.displayMessage("AAAARRRGH! We be missing the Export Node - {Export Function - 578}", ["Ok"])
    else:
        hou.ui.displayMessage("Avast! We be needing a path to export FBX to, Matey", ["Ok"])


def exportBgeo():
    #print("exporting to bgeo!")
    exportNode = getExportNode()
    cleanNode = getCleanNode()

    lineEdit = mainWindow.findChild(QtWidgets.QLineEdit, "fbx_path")
    filename = mainWindow.findChild(QtWidgets.QLineEdit, "fbx_file_name")

    if len(lineEdit.text()) > 0 and lineEdit.text() != "  No Path Set..." and len(filename.text()) > 0:

        finalPath = lineEdit.text() + filename.text() + ".bgeo"

        if exportNode != None:
            ropNode = exportNode.node("export_to_bgeo")
            ropNode.parm("sopoutput").set(finalPath)

            exportNode = getExportNode()
            nullNode = getExportNullNode(exportNode)

            if nullNode != None:
                nullNode.setName(getClothFilename(), True)

            if cleanNode != None:
                cleanNode.setName(getClothFilename(), True)

            ropNode.parm("execute").pressButton()
        else:
            hou.ui.displayMessage("AAAARRRGH! We be missing the Export Node - {Export Function - 578}", ["Ok"])
    else:
        hou.ui.displayMessage("Avast! We be needing a path to export FBX to, Matey", ["Ok"])
################################################







################################################
#UI Utilities
def toggleShrinkMaskParms(vis):
    blurslider = mainWindow.findChild(QtWidgets.QSlider, "blur_slider")
    blurLabel = mainWindow.findChild(QtWidgets.QLabel, "blur_label")
    blurslider.setVisible(vis)
    blurLabel.setVisible(vis)


def togglePaintTools(vis):
    #print("Toggling Paint Tools - " + str(vis))
    symbtn = mainWindow.findChild(QtWidgets.QPushButton, "sym_btn")
    paintbtn = mainWindow.findChild(QtWidgets.QPushButton, "exit_painting")
    clothvizbtn = mainWindow.findChild(QtWidgets.QPushButton, "cloth_viz_btn")
    symbtn.setVisible(vis)
    paintbtn.setVisible(vis)
    clothvizbtn.setVisible(vis)


def toggleUvView():
    viewer = toolutils.sceneViewer()
    viewport = viewer.curViewport()
    print(viewport.name())


def togglePreview():
    atlasClothing = getAtlasClothing()
    if atlasClothing != None:
        toggle = mainWindow.findChild(QtWidgets.QCheckBox, "preview_toggle")
        atlasClothing.parm("previewswitch").set(toggle.isChecked())


def updateShrinkValue():
    shrinkSlider = mainWindow.findChild(QtWidgets.QSlider, "blendshrinkslider")
    atlasClothing = getAtlasClothing()
    if atlasClothing != None:
        finalval = float(shrinkSlider.value())/100.0
        atlasClothing.parm("BlendShrink").set(finalval)
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Shrink Value Function}", ["Ok"])


def updateHighFatValue():
    highFatSlider = mainWindow.findChild(QtWidgets.QSlider, "highfatslider")
    atlasClothing = getAtlasClothing()
    
    if atlasClothing != None:
        finalval = float(highFatSlider.value())/100.0
        atlasClothing.parm("DeltaMapMaster").set(finalval)
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Shrink Value Function}", ["Ok"])


def updateDeltaPValue():
    deltaPSlider = mainWindow.findChild(QtWidgets.QSlider, "deltapstrengthslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        finalval = float(deltaPSlider.value())/10.0
        atlasClothing.parm("Preview_DeltaP_Strength").set(finalval)
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update DeltaP Value Function}", ["Ok"])


def updateUVSmoothIters():
    uvSmoothSlider = mainWindow.findChild(QtWidgets.QSlider, "uvSmoothIterationsSlider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("uvSmoothIterations").set(uvSmoothSlider.value())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {updateUVSmoothIters Function}", ["Ok"])


def updateMaxDistValue():
    maxDistSlider = mainWindow.findChild(QtWidgets.QSlider, "MaxDistSlider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        finalval = float(maxDistSlider.value())/100.0
        atlasClothing.parm("MaxDistance2").set(finalval)
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {updateMaxDistValue Function}", ["Ok"])


def updateSmoothDistValue():
    smoothdistslider = mainWindow.findChild(QtWidgets.QSlider, "smoothdistslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("SmoothDistance2").set(smoothdistslider.value())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Smooth Distance Function}", ["Ok"])


def updateMaxPntsValue():
    maxpntsslider = mainWindow.findChild(QtWidgets.QSlider, "maxpntsslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("MaxPoints2").set(maxpntsslider.value())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Max Points Slider Function}", ["Ok"])


def updateIterationsValue():
    iterslider = mainWindow.findChild(QtWidgets.QSlider, "iteratrionsslider")
    atlasClothing = getAtlasClothing()
    
    if atlasClothing != None:
        atlasClothing.parm("iterations").set(iterslider.value())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Iterations Slider Function}", ["Ok"])


def updateDistInfluenceValue():
    distInfluenceSlider = mainWindow.findChild(QtWidgets.QSlider, "distinfluenceslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        finalval = float(distInfluenceSlider.value())/100.0
        atlasClothing.parm("distanceInfluence").set(finalval)
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Distance Influence Function}", ["Ok"])


def updateBodyOffsetValue():
    bodyOffsetSlider = mainWindow.findChild(QtWidgets.QSlider, "bodyoffsetslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("BodyOffset").set(bodyOffsetSlider.value())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Body Offset Function}", ["Ok"])


def updateShrinkSmthDistValue():
    shrinksmoothdistslider = mainWindow.findChild(QtWidgets.QSlider, "shrinksmoothdistslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        finalval = float(shrinksmoothdistslider.value())/10.0
        atlasClothing.parm("ShrinkSmoothDistance").set(finalval)
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Body Offset Function}", ["Ok"])


def updateShrinkMaxPntsValue():
    shrinkmaxpntsslider = mainWindow.findChild(QtWidgets.QSlider, "shrinkmaxpntsslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("ShrinkMaxPoints").set(shrinkmaxpntsslider.value())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Shrink Max Points Function}", ["Ok"])


def updateShrinkMaxDist():
    shrinkmaxdistslider = mainWindow.findChild(QtWidgets.QSlider, "shrinkmaxdistslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("ShrinkMaxDistance").set(float(shrinkmaxdistslider.value()))
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Shrink Max Distance Function}", ["Ok"])


def updateShrinkPeakDist():
    shrinkPeakDist = mainWindow.findChild(QtWidgets.QSlider, "shrinkpeakdistslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("peakdist").set(float(shrinkPeakDist.value()))
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Shrink Peak Distance Function}", ["Ok"])

    
def updateShrinkPosToggle():
    setshrinkpostoggle = mainWindow.findChild(QtWidgets.QCheckBox, "setshrinkpostoggle")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("set_shrink_position").set(setshrinkpostoggle.isChecked())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Shrink Pos Toggle Function}", ["Ok"])


def updateShrinkNeighPntsToggle():
    shrinksmoothneighpntstoggle = mainWindow.findChild(QtWidgets.QCheckBox, "shrinksmoothneighpntstoggle")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("smoothneighbours").set(shrinksmoothneighpntstoggle.isChecked())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Shrink Neighbours Toggle Function}", ["Ok"])

def updateShrinkSmoothIterations():
    shrinksmoothitersslider = mainWindow.findChild(QtWidgets.QSlider, "shrinksmoothitersslider")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("smoothIterations").set(shrinksmoothitersslider.value())
    else:
        hou.ui.displayMessage("Avast! We have no Atlas Clothing node! {Update Shrink Smooth Iterations Function}", ["Ok"])

def updateUVFourToggle():
    uv4checkbox = mainWindow.findChild(QtWidgets.QCheckBox, "uv4checkbox")
    atlasClothing = getAtlasClothing()

    if atlasClothing != None:
        atlasClothing.parm("writeuv4").set(uv4checkbox.isChecked())


def updateNumericalValues():
    #Shrink Blend Group
    shrinkVal = mainWindow.findChild(QtWidgets.QLineEdit, "blendshrinkvalue")
    shrinkSlider = mainWindow.findChild(QtWidgets.QSlider, "blendshrinkslider")
    finalval = float(shrinkSlider.value())/100.0
    shrinkVal.setText(str(finalval))

    #HF Blend Group
    highFatSlider = mainWindow.findChild(QtWidgets.QSlider, "highfatslider")
    hfvalue = mainWindow.findChild(QtWidgets.QLineEdit, "HFValue")
    finalval = float(highFatSlider.value())/100.0
    hfvalue.setText(str(finalval))

    #DeltaP Slider Group
    deltaPSlider = mainWindow.findChild(QtWidgets.QSlider, "deltapstrengthslider")
    deltaPVal = mainWindow.findChild(QtWidgets.QLineEdit, "DPValue")
    finalval = float(deltaPSlider.value())/10.0
    deltaPVal .setText(str(finalval))

    #uv smooth iters slider group
    uvSmoothSlider = mainWindow.findChild(QtWidgets.QSlider, "uvSmoothIterationsSlider")
    uvsmoothval = mainWindow.findChild(QtWidgets.QLineEdit, "uvsmoothval")
    uvsmoothval.setText(str(uvSmoothSlider.value()))

    #max dist slider group
    maxDistSlider = mainWindow.findChild(QtWidgets.QSlider, "MaxDistSlider")
    maxDistVal = mainWindow.findChild(QtWidgets.QLineEdit, "maxDistVal")
    finalval = float(maxDistSlider.value())/100.0
    maxDistVal.setText(str(finalval))

    #smooth distance slider group
    smoothdistslider = mainWindow.findChild(QtWidgets.QSlider, "smoothdistslider")
    smoothdistval = mainWindow.findChild(QtWidgets.QLineEdit, "smoothdistval")
    smoothdistval.setText(str(smoothdistslider.value()))

    #Max Points Slider Group
    maxpntsslider = mainWindow.findChild(QtWidgets.QSlider, "maxpntsslider")
    maxpntsval = mainWindow.findChild(QtWidgets.QLineEdit, "maxpntsval")
    maxpntsval.setText(str(maxpntsslider.value()))

    #Iterations Slider Group
    iterslider = mainWindow.findChild(QtWidgets.QSlider, "iteratrionsslider")
    iterval = mainWindow.findChild(QtWidgets.QLineEdit, "iterationsval")
    iterval.setText(str(iterslider.value()))

    #Distance Influence Slider Group
    distInfluenceSlider = mainWindow.findChild(QtWidgets.QSlider, "distinfluenceslider")
    distInfVal = mainWindow.findChild(QtWidgets.QLineEdit, "distinfluenceval")
    finalval = float(distInfluenceSlider.value())/100
    distInfVal.setText(str(finalval))

    #Body Offset Slider Group
    bodyOffsetSlider = mainWindow.findChild(QtWidgets.QSlider, "bodyoffsetslider")
    bodyOffsetVal = mainWindow.findChild(QtWidgets.QLineEdit, "bodyoffsetval")
    bodyOffsetVal.setText(str(bodyOffsetSlider.value()))

    #Shrink Smooth Dist Slider Group
    shrinksmoothdistslider = mainWindow.findChild(QtWidgets.QSlider, "shrinksmoothdistslider")
    shrinksmthdistval = mainWindow.findChild(QtWidgets.QLineEdit, "shrinksmoothdistval")
    finalval = float(shrinksmoothdistslider.value())/10.0
    shrinksmthdistval.setText(str(finalval))

    #Shrink Max Pnts Slider Group
    shrinkmaxpntsslider = mainWindow.findChild(QtWidgets.QSlider, "shrinkmaxpntsslider")
    shrinksmthdistval = mainWindow.findChild(QtWidgets.QLineEdit, "shrinkmaxpntsval")
    shrinksmthdistval.setText(str(shrinkmaxpntsslider.value()))

    #Shrink MaxDist Slider Group
    shrinkmaxdistslider = mainWindow.findChild(QtWidgets.QSlider, "shrinkmaxdistslider")
    shrinkmaxdistval = mainWindow.findChild(QtWidgets.QLineEdit, "shrinkmaxdistval")
    shrinkmaxdistval.setText(str(shrinkmaxdistslider.value()))

    #Shrink Peak Dist Slider Group
    shrinkPeakDist = mainWindow.findChild(QtWidgets.QSlider, "shrinkpeakdistslider")
    shrinkPeakDistVal = mainWindow.findChild(QtWidgets.QLineEdit, "shrinkpeakdistval")
    shrinkPeakDistVal.setText(str(shrinkPeakDist.value()))

    #Shrink Smooth Iterations Slider Group
    shrinksmoothitersslider = mainWindow.findChild(QtWidgets.QSlider, "shrinksmoothitersslider")
    shrinksmoothitersval = mainWindow.findChild(QtWidgets.QLineEdit, "shrinksmoothitersval")
    shrinksmoothitersval.setText(str(shrinksmoothitersslider.value()))
################################################

    
    





########################################################################
#  Entry point for UI
########################################################################
def onCreateInterface():
    global mainWindow

    # Load the interface layout from the .ui file.  Need to make this relative
    ui_file_path = folder
    loader = QtUiTools.QUiLoader()
    ui_file = QtCore.QFile(ui_file_path)
    ui_file.open(QtCore.QFile.ReadOnly)
    mainWindow = loader.load(ui_file)


    #add the icon to the icon label
    imagepath = icon
    iconLabel = mainWindow.findChild(QtWidgets.QLabel, "icon_label")
    iconLabel.setStyleSheet("background-image: url(" + imagepath + ");")

    #attach load fbx button click
    loadbtn = mainWindow.findChild(QtWidgets.QPushButton, "load_btn")
    loadbtn.clicked.connect(loadFbx)


    #attach body toggle button
    bodytogglebtn = mainWindow.findChild(QtWidgets.QPushButton, "body_toggle")
    bodytogglebtn.setText("Body Type - Male")
    bodytogglebtn.clicked.connect(toggleBody)

    bodyvizbtn = mainWindow.findChild(QtWidgets.QPushButton, "body_viz_btn")
    bodyvizbtn.setText("Body Viz - On")
    bodyvizbtn.clicked.connect(toggleBodyViz)
    

    #attach clothing processing click
    clothingbtn = mainWindow.findChild(QtWidgets.QPushButton, "cloth_btn")
    clothingbtn.clicked.connect(processClothing)

    rigidgrpedit = mainWindow.findChild(QtWidgets.QLineEdit, "rigid_grp_edit")
    rigidgrpedit.textChanged.connect(setRigidGroup)
    rigidgrpedit.returnPressed.connect(setRigidGroup)
    


    #attach to Painting buttons
    paintredbtn = mainWindow.findChild(QtWidgets.QPushButton, "paintred")
    paintredbtn.clicked.connect(paintSkinViz)

    paintgreenbtn = mainWindow.findChild(QtWidgets.QPushButton, "paintgreen")
    paintgreenbtn.clicked.connect(paintShrinkMask)

    paintbluebtn = mainWindow.findChild(QtWidgets.QPushButton, "paintblue")
    paintbluebtn.clicked.connect(paintClothingViz)

    exitpaintbtn = mainWindow.findChild(QtWidgets.QPushButton, "exit_painting")
    exitpaintbtn.clicked.connect(exitPainting)

    exportMasksbtn = mainWindow.findChild(QtWidgets.QPushButton, "export_masks")
    exportMasksbtn.clicked.connect(exportMasks)

    maskpathbtn = mainWindow.findChild(QtWidgets.QPushButton, "mask_path_btn")
    maskpathbtn.clicked.connect(setMaskPath)

    blurslider = mainWindow.findChild(QtWidgets.QSlider, "blur_slider")
    blurslider.valueChanged.connect(updateBlurValue)
    toggleShrinkMaskParms(False)

    dilateslider = mainWindow.findChild(QtWidgets.QSlider, "dilate_slider")
    dilateslider.valueChanged.connect(updateDilateValue)
    dilateslider.setVisible(False)
    dilatelabel = mainWindow.findChild(QtWidgets.QLabel, "dilate_label")
    dilatelabel.setText("Dilate: " + str(dilateslider.value()))
    dilatelabel.setVisible(False)

    symbtn = mainWindow.findChild(QtWidgets.QPushButton, "sym_btn")
    symbtn.clicked.connect(updatePaintingTools)

    loadmaskbtn = mainWindow.findChild(QtWidgets.QPushButton, "load_mask_btn")
    loadmaskbtn.clicked.connect(loadMask)

    clothToggle = mainWindow.findChild(QtWidgets.QPushButton, "cloth_viz_btn")
    clothToggle.clicked.connect(toggleClothingInPainting)
    togglePaintTools(False)



    #Init Resolution Dropdown
    resbox = mainWindow.findChild(QtWidgets.QComboBox, "res_box")
    resbox.setCurrentIndex(1)



    #attach all settings buttons
    frameallbtn = mainWindow.findChild(QtWidgets.QPushButton, "frameall_btn")
    frameallbtn.clicked.connect(frameAll)

    nolightbtn = mainWindow.findChild(QtWidgets.QPushButton, "no_light_btn")
    nolightbtn.clicked.connect(setNoLighting)

    normlightbtn = mainWindow.findChild(QtWidgets.QPushButton, "normal_light_btn")
    normlightbtn.clicked.connect(setNormalLighting)


    #attach fbx export btns
    exportfbxbtn = mainWindow.findChild(QtWidgets.QPushButton, "fbx_path_btn")
    exportfbxbtn.pressed.connect(getFbxPath)

    exportbtn = mainWindow.findChild(QtWidgets.QPushButton, "export_cloth_btn")
    exportbtn.clicked.connect(exportFbx)

    begoExportBtn = mainWindow.findChild(QtWidgets.QPushButton, "bgeo_export_btn")
    begoExportBtn.clicked.connect(exportBgeo)

    #determine which type of export to use
    if curLicense == hou.licenseCategoryType.Apprentice or curLicense == hou.licenseCategoryType.ApprenticeHD:
        exportbtn.setVisible(False)

    if curLicense == hou.licenseCategoryType.Commercial or curLicense == hou.licenseCategoryType.Education:
        begoExportBtn.setVisible(False)

    #skinning ui
    skinbtn = mainWindow.findChild(QtWidgets.QPushButton, "skin_btn")
    skinbtn.setVisible(False)
    skinlabel = mainWindow.findChild(QtWidgets.QLabel, "skin_label")
    skinlabel.setVisible(False)


    #start of Advanced UI set up
    shrinkShapeBtn = mainWindow.findChild(QtWidgets.QPushButton, "loadShrinkBtn")
    shrinkShapeBtn.clicked.connect(loadShrinkShape)

    projectionShapeBtn = mainWindow.findChild(QtWidgets.QPushButton, "projectionShapeBtn")
    projectionShapeBtn.clicked.connect(loadProjectionShape)

    shrinkLE = mainWindow.findChild(QtWidgets.QLineEdit, "shrinkshapelineedit")
    shrinkLE.textChanged.connect(updateShrinkPath)

    projectionLE = mainWindow.findChild(QtWidgets.QLineEdit, "projectionShapePath")
    projectionLE.textChanged.connect(updateProjectionPath)

    previewToggle = mainWindow.findChild(QtWidgets.QCheckBox, "preview_toggle")
    previewToggle.clicked.connect(togglePreview)

    shrinkSlider = mainWindow.findChild(QtWidgets.QSlider, "blendshrinkslider")
    shrinkSlider.sliderReleased.connect(updateShrinkValue)
    shrinkSlider.valueChanged.connect(updateNumericalValues)

    highFatSlider = mainWindow.findChild(QtWidgets.QSlider, "highfatslider")
    highFatSlider.sliderReleased.connect(updateHighFatValue)
    highFatSlider.valueChanged.connect(updateNumericalValues)

    deltaPSlider = mainWindow.findChild(QtWidgets.QSlider, "deltapstrengthslider")
    deltaPSlider.sliderReleased.connect(updateDeltaPValue)
    deltaPSlider.valueChanged.connect(updateNumericalValues)

    uvSmoothSlider = mainWindow.findChild(QtWidgets.QSlider, "uvSmoothIterationsSlider")
    uvSmoothSlider.sliderReleased.connect(updateUVSmoothIters)
    uvSmoothSlider.valueChanged.connect(updateNumericalValues)

    maxDistSlider = mainWindow.findChild(QtWidgets.QSlider, "MaxDistSlider")
    maxDistSlider.sliderReleased.connect(updateMaxDistValue)
    maxDistSlider.valueChanged.connect(updateNumericalValues)

    smoothdistslider = mainWindow.findChild(QtWidgets.QSlider, "smoothdistslider")
    smoothdistslider.sliderReleased.connect(updateSmoothDistValue)
    smoothdistslider.valueChanged.connect(updateNumericalValues)

    maxpntsslider = mainWindow.findChild(QtWidgets.QSlider, "maxpntsslider")
    maxpntsslider.sliderReleased.connect(updateMaxPntsValue)
    maxpntsslider.valueChanged.connect(updateNumericalValues)

    iterslider = mainWindow.findChild(QtWidgets.QSlider, "iteratrionsslider")
    iterslider.sliderReleased.connect(updateIterationsValue)
    iterslider.valueChanged.connect(updateNumericalValues)

    distInfluenceSlider = mainWindow.findChild(QtWidgets.QSlider, "distinfluenceslider")
    distInfluenceSlider.sliderReleased.connect(updateDistInfluenceValue)
    distInfluenceSlider.valueChanged.connect(updateNumericalValues)

    bodyOffsetSlider = mainWindow.findChild(QtWidgets.QSlider, "bodyoffsetslider")
    bodyOffsetSlider.sliderReleased.connect(updateBodyOffsetValue)
    bodyOffsetSlider.valueChanged.connect(updateNumericalValues)

    shrinksmoothdistslider = mainWindow.findChild(QtWidgets.QSlider, "shrinksmoothdistslider")
    shrinksmoothdistslider.sliderReleased.connect(updateShrinkSmthDistValue)
    shrinksmoothdistslider.valueChanged.connect(updateNumericalValues)

    shrinkmaxpntsslider = mainWindow.findChild(QtWidgets.QSlider, "shrinkmaxpntsslider")
    shrinkmaxpntsslider.sliderReleased.connect(updateShrinkMaxPntsValue)
    shrinkmaxpntsslider.valueChanged.connect(updateNumericalValues)

    shrinkmaxdistslider = mainWindow.findChild(QtWidgets.QSlider, "shrinkmaxdistslider")
    shrinkmaxdistslider.sliderReleased.connect(updateShrinkMaxDist)
    shrinkmaxdistslider.valueChanged.connect(updateNumericalValues)

    shrinkPeakDist = mainWindow.findChild(QtWidgets.QSlider, "shrinkpeakdistslider")
    shrinkPeakDist.sliderReleased.connect(updateShrinkPeakDist)
    shrinkPeakDist.valueChanged.connect(updateNumericalValues)

    setshrinkpostoggle = mainWindow.findChild(QtWidgets.QCheckBox, "setshrinkpostoggle")
    setshrinkpostoggle.clicked.connect(updateShrinkPosToggle)

    shrinksmoothneighpntstoggle = mainWindow.findChild(QtWidgets.QCheckBox, "shrinksmoothneighpntstoggle")
    shrinksmoothneighpntstoggle.clicked.connect(updateShrinkNeighPntsToggle)

    shrinksmoothitersslider = mainWindow.findChild(QtWidgets.QSlider, "shrinksmoothitersslider")
    shrinksmoothitersslider.sliderReleased.connect(updateShrinkSmoothIterations)
    shrinksmoothitersslider.valueChanged.connect(updateNumericalValues)

    uv4checkbox = mainWindow.findChild(QtWidgets.QCheckBox, "uv4checkbox")
    uv4checkbox.clicked.connect(updateUVFourToggle)

    #Initialize the system
    createClothNode()
    createWizardNode()
    getSceneInfo()
    initAdvancedSliders()
    
    return mainWindow
########################################################################]]></script>
    <includeInPaneTabMenu menu_position="0" create_separator="false"/>
    <includeInToolbarMenu menu_position="101" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
